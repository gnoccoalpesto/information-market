LUDERIC DRIVE
https://drive.google.com/drive/folders/16iAl7eeitXAf_gAv4wz5sreHP5u6hpPb
MYDRIVE
https://drive.google.com/drive/folders/1PlWc36lnJWACqnCIYEpYKVkDDaUndFvD


================================================================
================================================================
___  ___        _    ___ 
 |  |   |      | \  |   |
 |  |   |      |  \ |   | 
 |  |   |      |  / |   |
 |  |___|      |_/  |___| 

=========
SIMULATOR=======================================================

use #property decorator, getter and setter for private attributes
{{{{
class Prova:
    def __init__(self):self._a = 0 #private attribute, "not accessible"

    @property
    def a(self): return self._a

    @a.setter
    def a(self, value): self._a = value

    @a.getter
    def a(self): return self._a

if __name__ == '__main__':
    prova = Prova()
    print(prova.a)#0
    prova.a = 1; print(prova.a)#1
}}}}


-None var should always be tested with "is" operator
--also is faster that "==", as it does not need to check the type

=============
DATA ANALYSIS=======================================================

-CORRELATION SYMBOL
--add a symbol to indicate statistical test between compared make_boxplots
Symbol      Meaning
ns          P > 0.05 (not significant)
*           P ≤ 0.05
**          P ≤ 0.01
***         P ≤ 0.001
****        P ≤ 0.0001 (For the last two choices only)
---easy: in x_label
---best: above the boxplot

==========
REPUTATION======================================================
{{{{{
SKEPTICISM: AGENT-WISE protection

REPUTATION: SYSTEM-WISE protection
--could select from a Prob.distrib of a number of observations
---wealth is a centralized system (on the blockchain); other?
}}}}}


!!!!!!!!!!!!!!
-ALL PROCESSING OF BCHAIN DATA MUST BE DONE BY BEHAVIOUR AND NOT 
    BLOCKCHAIN CLASS

!!!!!!!!!!!!!!!!!



-REPUTATION: WEALTH

--VARIABLE SKEPTICISM: WAITING TIME
---age of info used in COMBINING STRATEGY
--> combine with WEALTH



#   #   #   #
--AGE of ROBOT: the OLDER, THE HARDER
---avoids penalisation for NEWCOMERS, when system is well established already

--VARYING BEHAVIOUR
---start as SCEPTICAL
---change in STABLE PART
--->bencharmk for stable PART

--use both LOCAL and GLOBAL info
---compare the wealth across the two neighbourhoods


--DYNAMIC THRESHOLD w WEALTH & AGE
--varying(decreasing) with time


-local info/gossip? (to reduce data on blockchain)
--WHAT TO DO WITH NEWCOMERS? maybe use a more decentralid approach
while using a centralized one for the first robots


-GAME THEORY: can it be modeled this way?
--inverted: i know equilibia (cooperation) -> find payoff matrix


-papers: centralized/decentralized approach


-fairness


-musolesi


GAMETHEORY ALSO FOR TASK ALLOCATION?


===============
TASK ALLOCATION=================================================

-use cost of motion

- introduce both cost w/, w/out resource loaded

-use stopping time (com stop time):stop cost

!do not use request cooldown

!offer-demand laws (intersectin point of linear characteristic) must regulate the sys
!!robots must enroll themselves in the task they know are better suited for


======================================
PATH PLANNING FOR COMPLEX ENVIRONMENTS===========================

-complex environment (walls, obstacles, etc)
!as for now is simple vectorial start-> end

-introduce waypoint navigation
-?how to take into account and recover from errors


=============
PENALISATION=========================================================

-GAP WITHvsWITHOUT ----------------------------------

--STABLE: items throughput (items/tick==slope)

--TRANSITORY: number of SOLD MESSAGES (at the beginning), enough?
---use transactions logs to compute the distribution of sold messages wrt steps


