FIX STRAWBERRY

?TAXATION IF BYZ DONT SELL, NO STACKING, THEN NO PUNISHING
--volker's idea on how penalize the byz, if they're not by stacking


############################################
avg sab

9.271878844264535,3.77192022795428,0.012280990514015822,6.713103274216812,16.750533996492816,0.3067828097582611,1.1694081779502659,1.929371733055938,13.48620761763654,1.7330823363481185,1.2135388295785066,19.733565229412,6.703816343341016,6.748757478150488,0.03957343654761751,16.947528615154337,0.012892206940368623,10.435087841558971,2.3517517741810807,0.06533160522327096,5.845778912629099,
0.09333434680293153,0.04579116301918376,1.148658719756651,0.06872896423336881
rewards

3981,1814,229,3808,4083,732,2557,3685,3755,1844,3065,3766,3823,2315,345,4304,868,3728,2364,459,2360,
25,27,2200,1
transactions combined seller

7309,14294,20480,6380,5862,18269,4572,9031,8604,11639,6028,5545,6555,6732,14437,6145,6704,5769,5670,8172,8599,
10689,13032,4215,15904
completed seller

2266,2563,2822,2218,2116,2841,2108,2376,2379,2600,2204,1946,2623,2135,2539,2215,1495,2239,1730,1754,2449,
2044,2053,1978,2445
combined buyer

22,21,19,22,22,21,20,20,20,19,17,19,21,19,19,18,11,18,13,14,18,
16,15,14,16-> working greately, good buyers! no sellers!

##############################################################################


REVIEWS (OTHER SCORE ON BC):
everytime reputation<>=0 -> review <>=0

TEST REVIEWS FOR TREND

also fo priority
if reputation level raises, give priority to data BUT
#   few transactions combined pending
# self.pending_information = {location: {} for location in Location}


TEST RECIDIVO INFO BRUTTE
for bot_id, data in metadata_sorted_by_age:
	if data["age"] < self.navigation_table.get_age_for_location(location):
			and bot_id not in self.pending_information[location]:
		try:
		

TEST PERDITE LOCALI REWARD X CATTIVE INFORMAZIONI CIRCOLANTI

for robot in session:
    buy()
    
  def start_buy(self,session,bc):
         #rejects buy if some conditions not met
        	return bc.get_reward(session)>=SCALE bc.reward('mean')		
        
      

LUDERIC DRIVE
https://drive.google.com/drive/folders/16iAl7eeitXAf_gAv4wz5sreHP5u6hpPb
    
================================================================
================================================================
___  ___        _    ___ 
 |  |   |      | \  |   |
 |  |   |      |  \ |   | 
 |  |   |      |  / |   |
 |  |___|      |_/  |___| 

=========
SIMULATOR=======================================================

use #property decorator, getter and setter for private attributes
{{{{
class Prova:
    def __init__(self):self._a = 0 #private attribute, "not accessible"

    @property
    def a(self): return self._a

    @a.setter
    def a(self, value): self._a = value

    @a.getter
    def a(self): return self._a

if __name__ == '__main__':
    prova = Prova()
    print(prova.a)#0
    prova.a = 1; print(prova.a)#1
}}}}


-None var should always be tested with "is" operator
--also is faster that "==", as it does not need to check the type

=============
DATA ANALYSIS=======================================================

-CORRELATION SYMBOL
--add a symbol to indicate statistical test between compared make_boxplots
Symbol      Meaning
ns          P > 0.05 (not significant)
*           P ≤ 0.05
**          P ≤ 0.01
***         P ≤ 0.001
****        P ≤ 0.0001 (For the last two choices only)
---easy: in x_label
---best: above the boxplot

==========
REPUTATION======================================================
{{{{{
SKEPTICISM: AGENT-WISE protection

REPUTATION: SYSTEM-WISE protection
--could select from a Prob.distrib of a number of observations
---wealth is a centralized system (on the blockchain); other?
}}}}}


!!!!!!!!!!!!!!
-ALL PROCESSING OF BCHAIN DATA MUST BE DONE BY BEHAVIOUR AND NOT 
    BLOCKCHAIN CLASS

!!!!!!!!!!!!!!!!!



-REPUTATION: WEALTH

--VARIABLE SKEPTICISM: WAITING TIME
---age of info used in COMBINING STRATEGY
--> combine with WEALTH



#   #   #   #
--AGE of ROBOT: the OLDER, THE HARDER
---avoids penalisation for NEWCOMERS, when system is well established already

--VARYING BEHAVIOUR
---start as SCEPTICAL
---change in STABLE PART
--->bencharmk for stable PART

--use both LOCAL and GLOBAL info
---compare the wealth across the two neighbourhoods


--DYNAMIC THRESHOLD w WEALTH & AGE
--varying(decreasing) with time


-local info/gossip? (to reduce data on blockchain)
--WHAT TO DO WITH NEWCOMERS? maybe use a more decentralid approach
while using a centralized one for the first robots


-GAME THEORY: can it be modeled this way?
--inverted: i know equilibia (cooperation) -> find payoff matrix


-papers: centralized/decentralized approach


-fairness


-musolesi


GAMETHEORY ALSO FOR TASK ALLOCATION?


===============
TASK ALLOCATION=================================================

-use cost of motion

- introduce both cost w/, w/out resource loaded

-use stopping time (com stop time):stop cost

!do not use request cooldown

!offer-demand laws (intersectin point of linear characteristic) must regulate the sys
!!robots must enroll themselves in the task they know are better suited for


======================================
PATH PLANNING FOR COMPLEX ENVIRONMENTS===========================

-complex environment (walls, obstacles, etc)
!as for now is simple vectorial start-> end

-introduce waypoint navigation
-?how to take into account and recover from errors


=============
PENALISATION=========================================================

-GAP WITHvsWITHOUT ----------------------------------

--STABLE: items throughput (items/tick==slope)

--TRANSITORY: number of SOLD MESSAGES (at the beginning), enough?
---use transactions logs to compute the distribution of sold messages wrt steps


